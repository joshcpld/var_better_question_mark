janitor::clean_names() %>%
mutate( date = ymd(date) + months(1)) %>% #this means we changed the dates of the jobswitching series
dplyr::select(date, job_switching)
# import NEI data
NEI_df <- read_excel('\\\\romulus\\ECD_PRO$\\BRIEFING\\WAGES\\AENA nowcasting model\\inputs\\Final model input data.xlsx', sheet = 2) %>%
janitor::clean_names()
NEI_df <- NEI_df %>%
mutate(date = ymd(month)) %>%
dplyr::select(date, hours_based_nei)
df2 <- df %>% left_join(js_df, by = 'date') %>%
left_join(NEI_df, by = 'date') %>% left_join(nairu, by = 'date')
df2 <- df2 %>% mutate(log_aena = log(compensation_of_employees_per_hour_current_prices),
log_aena_percent_changes = (log(compensation_of_employees_per_hour_current_prices) - log(lag(compensation_of_employees_per_hour_current_prices))) / log(lag(compensation_of_employees_per_hour_current_prices)),
aena = log(compensation_of_employees_per_hour_current_prices) - log(lag(compensation_of_employees_per_hour_current_prices)),
aena = lead(aena,1),
unemp_gap = ((unemployment_rate_persons - filtered_nairu)/unemployment_rate_persons),
pwl_hrs = pwl_hrs  - lag(pwl_hrs ,1),
job_switching_stat = job_switching - lag(job_switching),
hours_based_nei_stat = hours_based_nei - lag(hours_based_nei, 1),
# cpi_stat = consumer_price_index_all_groups_quarterly_change_in_per_cent  - lag(consumer_price_index_all_groups_quarterly_change_in_per_cent ,1),
cpi_stat = consumer_price_index_all_groups_quarterly_change_in_per_cent,
js_lag3 = lag(job_switching_stat,3),
hours_based_nei_lag3 = lag(hours_based_nei_stat ,3),
cpi_lag4 = lag(cpi_stat)) %>% dplyr::select(date, aena, unemp_gap, cpi_lag4, hours_based_nei_lag3, js_lag3, pwl_hrs, log_aena, log_aena_percent_changes) %>% filter(date > ymd('2005-01-01'))
test_actual_log_aena <- df2$log_aena %>%  tail(1)
# build model
train_set <- df2 %>%  drop_na()
test <- df2 %>% tail(1)
adjusted_phillips_curve <- lm(aena ~  js_lag3 + cpi_lag4 + hours_based_nei_lag3 + pwl_hrs + unemp_gap, data = train_set)
sm <- summary(adjusted_phillips_curve)
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# prediction for next quarter (log difference) -------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(shiny); source('MFRED.R')
#library(treasuryodysseus, lib.loc = "//afs1/R_Packages/Library")
library(tidyverse)
library(dplyr)
library(tidyr)
library(lubridate)
library(odbc)
library(DBI)
library(glue)
library(zoo)
library(janitor)
library(readxl)
library(stringr)
library(bimets)
library(writexl)
#DEFINE FUNCTIONS
#This function establishes a connection to the DDU_DATA database
ddu_connect <- function() {
DBI::dbConnect(odbc::odbc(), Driver = "ODBC Driver 17 for SQL Server",
Server = "DO1COMMONSQL01,51433",
Database = "DDU_DATA", Trusted_Connection = "yes")
}
#This function pulls tables from the DDU_DATA database
get_ddu_table <- function(.initialise_connection = ddu_connect(), vintage) {
get_table <- function(table_name) DBI::dbReadTable(.initialise_connection, table_name)
get_query <- function(query) DBI::dbGetQuery(.initialise_connection, query)
df <- get_query(glue("SELECT * FROM [{vintage}]"))
if ( !is.null(df$timestamp)){
df$timestamp <- lubridate::with_tz(df$timestamp , tz = "Australia/Canberra")
}
return(df)
}
#This function allows tables to be saved to the DDU_DATA database
save_to_db <- function(df, .initialise_connection = ddu_connect(), unique_table_string, overwrite_existing = TRUE) {
if(overwrite_existing | !DBI::dbExistsTable(.initialise_connection, unique_table_string)){
DBI::dbWriteTable(.initialise_connection, unique_table_string, df, overwrite = TRUE, row.names = FALSE)
} else {
DBI::dbWriteTable(.initialise_connection, unique_table_string, df, append = TRUE, row.names = FALSE)
}
}
#This function handles monthly to quarterly aggregation
library(shiny); source('MFRED.R')
library(shiny); source('MFRED.R')
source('MFRED.R')
library(shiny); source('MFRED.R')
library(shiny); source('MFRED.R')
library(shiny); source('MFRED.R')
source('MFRED.R')
library(shiny); source('MFRED.R')
################################################################################
################################### SET UP #####################################
################################################################################
library(tidyverse)
library(urca)
setwd("C:/Users/gtd/OneDrive - Treasury/Documents/var_project")
################################################################################
############################### DATA IMPORT ####################################
################################################################################
data <- read_csv("data/data.csv")
################################################################################
################################# MODEL 1 ######################################
################################################################################
model_1_data <- data %>%
select(date,gdp,rnu,cpi)
model_1_data %>%
pivot_longer(-date) %>%
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
data <- read_csv("data/data.csv")
################################################################################
################################# MODEL 1 ######################################
################################################################################
model_1_data <- data %>%
select(date,gdp,rnu,cpi)
######################## CREATING STATIONARY VARIABLES #########################
model_1_data %>%
pivot_longer(-date) %>%
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data %>%
pivot_longer(-date) %>%
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
View(model_1_data)
model_1_data %>%
pivot_longer(-date)
model_1_data %>%
pivot_longer(-date) %>%
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
library(tidyverse)
library(urca)
setwd("C:/Users/gtd/OneDrive - Treasury/Documents/var_project")
getwd()
data <- read_csv("data/data.csv")
model_1_data <- data %>%
select(date,gdp,rnu,cpi)
View(model_1_data)
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data <- model_1_data %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data <- model_1_data %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
View(model_1_data)
model_1_data <- model_1_data %>%
pivot_longer(name) %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
model_1_data <- model_1_data %>%
pivot_longer(-date) %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
View(model_1_data)
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
library(tidyverse)
library(urca)
data <- read_csv("data/data.csv")
model_1_data <- data %>%
select(date,gdp,rnu,cpi)
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data <- model_1_data %>%
pivot_longer(-date) %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
ggplot(model_1_data, aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
View(model_1_data)
