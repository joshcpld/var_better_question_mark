stationarity_results <- data_nested %>%
mutate(
stationarity_test = map2(name, data, ~ {
ts_data <- .y$value
# Determine ADF test type (default: "drift")
adf_type <- if (!is.null(adf_types) && .x %in% names(adf_types)) {
adf_types[[.x]]
} else {
"drift"
}
# Perform ADF test with BIC-based lag selection
adf_result <- ur.df(ts_data, type = adf_type, selectlags = "BIC")
adf_stat <- adf_result@teststat[1]
adf_crit_1pc <- adf_result@cval[1, 1]
adf_crit_5pc <- adf_result@cval[1, 2]
adf_crit_10pc <- adf_result@cval[1, 3]
adf_reject_1pc <- adf_stat < adf_crit_1pc
adf_reject_5pc <- adf_stat < adf_crit_5pc
adf_reject_10pc <- adf_stat < adf_crit_10pc
# Determine KPSS test type (default: "mu")
kpss_type <- if (!is.null(kpss_types) && .x %in% names(kpss_types)) {
kpss_types[[.x]]
} else {
"mu"
}
# Perform KPSS test
kpss_result <- ur.kpss(ts_data, type = kpss_type)
kpss_stat <- kpss_result@teststat
kpss_crit_1pc <- kpss_result@cval[1]
kpss_crit_5pc <- kpss_result@cval[2]
kpss_crit_10pc <- kpss_result@cval[3]
kpss_reject_1pc <- kpss_stat > kpss_crit_1pc
kpss_reject_5pc <- kpss_stat > kpss_crit_5pc
kpss_reject_10pc <- kpss_stat > kpss_crit_10pc
# Report at what level each test supports stationarity
adf_support <- case_when(
adf_reject_1pc ~ "ADF: Stationary at 1%",
adf_reject_5pc ~ "ADF: Stationary at 5%",
adf_reject_10pc ~ "ADF: Stationary at 10%",
TRUE ~ "ADF: Non-stationary"
)
kpss_support <- case_when(
kpss_reject_1pc ~ "KPSS: Non-stationary at 1%",
kpss_reject_5pc ~ "KPSS: Non-stationary at 5%",
kpss_reject_10pc ~ "KPSS: Non-stationary at 10%",
TRUE ~ "KPSS: Stationary"
)
# Return results as a dataframe
tibble(
test_statistic_adf = adf_stat,
crit_value_adf_1pc = adf_crit_1pc,
crit_value_adf_5pc = adf_crit_5pc,
crit_value_adf_10pc = adf_crit_10pc,
reject_adf_1pc = adf_reject_1pc,
reject_adf_5pc = adf_reject_5pc,
reject_adf_10pc = adf_reject_10pc,
test_statistic_kpss = kpss_stat,
crit_value_kpss_1pc = kpss_crit_1pc,
crit_value_kpss_5pc = kpss_crit_5pc,
crit_value_kpss_10pc = kpss_crit_10pc,
reject_kpss_1pc = kpss_reject_1pc,
reject_kpss_5pc = kpss_reject_5pc,
reject_kpss_10pc = kpss_reject_10pc,
adf_support = adf_support,
kpss_support = kpss_support,
adf_type = adf_type,
kpss_type = kpss_type
)
})
) %>%
select(name, stationarity_test) %>%
unnest(cols = stationarity_test)
# Check for agreement
agreement <- stationarity_results %>%
mutate(
agreement_status = case_when(
grepl("Stationary", adf_support) & grepl("Stationary", kpss_support) ~ "Both support stationarity",
grepl("Non-stationary", adf_support) & grepl("Non-stationary", kpss_support) ~ "Both support non-stationarity",
TRUE ~ "ADF and KPSS disagree"
)
)
# Print summary message
summary_message <- agreement %>%
group_by(agreement_status) %>%
summarise(count = n(), .groups = "drop") %>%
arrange(desc(count)) %>%
mutate(message = paste0(count, " variable(s): ", agreement_status)) %>%
pull(message) %>%
paste(collapse = "\n")
print(summary_message)
return(agreement)
}
# Example usage with default test type (drift)
stationarity_results <- stationarity_tests(model_1_data)
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
# Create a nested dataframe of each unique time series
data_nested <- data %>%
group_by(name) %>%
nest()
# Apply ADF and KPSS tests to each time series
stationarity_results <- data_nested %>%
mutate(
stationarity_test = map2(name, data, ~ {
ts_data <- .y$value
# Determine ADF test type (default: "drift")
adf_type <- if (!is.null(adf_types) && .x %in% names(adf_types)) {
adf_types[[.x]]
} else {
"drift"
}
# Perform ADF test with BIC-based lag selection
adf_result <- ur.df(ts_data, type = adf_type, selectlags = "BIC")
adf_stat <- adf_result@teststat[1]
adf_crit_1pc <- adf_result@cval[1, 1]
adf_crit_5pc <- adf_result@cval[1, 2]
adf_crit_10pc <- adf_result@cval[1, 3]
adf_reject_1pc <- adf_stat < adf_crit_1pc
adf_reject_5pc <- adf_stat < adf_crit_5pc
adf_reject_10pc <- adf_stat < adf_crit_10pc
# Determine KPSS test type (default: "mu")
kpss_type <- if (!is.null(kpss_types) && .x %in% names(kpss_types)) {
kpss_types[[.x]]
} else {
"mu"
}
# Perform KPSS test
kpss_result <- ur.kpss(ts_data, type = kpss_type)
kpss_stat <- kpss_result@teststat
kpss_crit_1pc <- kpss_result@cval[1]
kpss_crit_5pc <- kpss_result@cval[2]
kpss_crit_10pc <- kpss_result@cval[3]
kpss_reject_1pc <- kpss_stat > kpss_crit_1pc
kpss_reject_5pc <- kpss_stat > kpss_crit_5pc
kpss_reject_10pc <- kpss_stat > kpss_crit_10pc
# Determine support levels
adf_support_level <- case_when(
adf_reject_1pc ~ "1%",
adf_reject_5pc ~ "5%",
adf_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
kpss_support_level <- case_when(
!kpss_reject_10pc ~ "Stationary",
kpss_reject_1pc ~ "1%",
kpss_reject_5pc ~ "5%",
kpss_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
# Return results as a dataframe
tibble(
test_statistic_adf = adf_stat,
test_statistic_kpss = kpss_stat,
adf_support_level = adf_support_level,
kpss_support_level = kpss_support_level,
adf_type = adf_type,
kpss_type = kpss_type
)
})
) %>%
select(name, stationarity_test) %>%
unnest(cols = stationarity_test)
# Categorize results
grouped_results <- stationarity_results %>%
mutate(
agreement_status = case_when(
adf_support_level == kpss_support_level & adf_support_level %in% c("1%", "5%", "10%") ~
paste0("Both tests support stationarity at the ", adf_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level %in% c("1%", "5%", "10%") & adf_support_level != kpss_support_level ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS at the ", kpss_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level == "Stationary" ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS test supports stationarity"),
adf_support_level == "Non-stationary" & kpss_support_level == "Non-stationary" ~
"Both tests indicate non-stationarity",
TRUE ~ "ADF and KPSS disagree"
)
)
# Check if all variables have identical support levels
unique_support_levels <- unique(grouped_results$agreement_status)
if (length(unique_support_levels) == 1 && grepl("Both tests support stationarity", unique_support_levels)) {
print(unique_support_levels)
} else {
# Generate detailed messages
summary_message <- grouped_results %>%
group_by(agreement_status) %>%
summarise(variables = paste(name, collapse = ", "), .groups = "drop") %>%
mutate(message = paste0(agreement_status, " for: ", variables)) %>%
pull(message) %>%
paste(collapse = "\n")
print(summary_message)
}
return(grouped_results)
}
# Example usage with default test type (drift)
stationarity_results <- stationarity_tests(model_1_data)
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
# Create a nested dataframe of each unique time series
data_nested <- data %>%
group_by(name) %>%
nest()
# Apply ADF and KPSS tests to each time series
stationarity_results <- data_nested %>%
mutate(
stationarity_test = map2(name, data, ~ {
ts_data <- .y$value
# Determine ADF test type (default: "drift")
adf_type <- if (!is.null(adf_types) && .x %in% names(adf_types)) {
adf_types[[.x]]
} else {
"drift"
}
# Perform ADF test with BIC-based lag selection
adf_result <- ur.df(ts_data, type = adf_type, selectlags = "BIC")
adf_stat <- adf_result@teststat[1]
adf_crit_1pc <- adf_result@cval[1, 1]
adf_crit_5pc <- adf_result@cval[1, 2]
adf_crit_10pc <- adf_result@cval[1, 3]
adf_reject_1pc <- adf_stat < adf_crit_1pc
adf_reject_5pc <- adf_stat < adf_crit_5pc
adf_reject_10pc <- adf_stat < adf_crit_10pc
# Determine KPSS test type (default: "mu")
kpss_type <- if (!is.null(kpss_types) && .x %in% names(kpss_types)) {
kpss_types[[.x]]
} else {
"mu"
}
# Perform KPSS test
kpss_result <- ur.kpss(ts_data, type = kpss_type)
kpss_stat <- kpss_result@teststat
kpss_crit_1pc <- kpss_result@cval[1]
kpss_crit_5pc <- kpss_result@cval[2]
kpss_crit_10pc <- kpss_result@cval[3]
kpss_reject_1pc <- kpss_stat > kpss_crit_1pc
kpss_reject_5pc <- kpss_stat > kpss_crit_5pc
kpss_reject_10pc <- kpss_stat > kpss_crit_10pc
# Determine support levels
adf_support_level <- case_when(
adf_reject_1pc ~ "1%",
adf_reject_5pc ~ "5%",
adf_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
kpss_support_level <- case_when(
!kpss_reject_10pc ~ "Stationary",
kpss_reject_1pc ~ "1%",
kpss_reject_5pc ~ "5%",
kpss_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
# Return results as a dataframe
tibble(
test_statistic_adf = adf_stat,
test_statistic_kpss = kpss_stat,
adf_support_level = adf_support_level,
kpss_support_level = kpss_support_level,
adf_type = adf_type,
kpss_type = kpss_type
)
})
) %>%
select(name, stationarity_test) %>%
unnest(cols = stationarity_test)
# Categorize results
grouped_results <- stationarity_results %>%
mutate(
agreement_status = case_when(
adf_support_level == kpss_support_level & adf_support_level %in% c("1%", "5%", "10%") ~
paste0("Both tests support stationarity at the ", adf_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level %in% c("1%", "5%", "10%") & adf_support_level != kpss_support_level ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS at the ", kpss_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level == "Stationary" ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS test supports stationarity"),
adf_support_level == "Non-stationary" & kpss_support_level == "Non-stationary" ~
"Both tests indicate non-stationarity",
TRUE ~ "ADF and KPSS disagree"
)
)
# Check if all variables have identical support levels
unique_support_levels <- unique(grouped_results$agreement_status)
if (length(unique_support_levels) == 1 && grepl("Both tests support stationarity", unique_support_levels)) {
print(unique_support_levels)
} else {
# Generate detailed messages
summary_message <- grouped_results %>%
group_by(agreement_status) %>%
summarise(variables = paste(name, collapse = ", "), .groups = "drop")
# Print each case on a separate line
walk2(summary_message$agreement_status, summary_message$variables, function(status, vars) {
print(paste0(status, " for: ", vars))
})
}
return(grouped_results)
}
# Example usage with default test type (drift)
stationarity_results <- stationarity_tests(model_1_data)
View(data)
View(data)
library(tidyverse)
library(urca)
data <- read_csv("data/data.csv")
model_1_data <- data %>%
select(date,gdp,rnu,cpi)
model_1_data %>%
pivot_longer(-date) %>%
ggplot(aes(date, value, colour = name)) + geom_line() + facet_wrap(~name, scales = "free")
model_1_data <- model_1_data %>%
pivot_longer(-date) %>%
group_by(name) %>%
mutate(value = value - lag(value)) %>%
na.omit()
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
# Create a nested dataframe of each unique time series
data_nested <- data %>%
group_by(name) %>%
nest()
# Apply ADF and KPSS tests to each time series
stationarity_results <- data_nested %>%
mutate(
stationarity_test = map2(name, data, ~ {
ts_data <- .y$value
# Determine ADF test type (default: "drift")
adf_type <- if (!is.null(adf_types) && .x %in% names(adf_types)) {
adf_types[[.x]]
} else {
"drift"
}
# Perform ADF test with BIC-based lag selection
adf_result <- ur.df(ts_data, type = adf_type, selectlags = "BIC")
adf_stat <- adf_result@teststat[1]
adf_crit_1pc <- adf_result@cval[1, 1]
adf_crit_5pc <- adf_result@cval[1, 2]
adf_crit_10pc <- adf_result@cval[1, 3]
adf_reject_1pc <- adf_stat < adf_crit_1pc
adf_reject_5pc <- adf_stat < adf_crit_5pc
adf_reject_10pc <- adf_stat < adf_crit_10pc
# Determine KPSS test type (default: "mu")
kpss_type <- if (!is.null(kpss_types) && .x %in% names(kpss_types)) {
kpss_types[[.x]]
} else {
"mu"
}
# Perform KPSS test
kpss_result <- ur.kpss(ts_data, type = kpss_type)
kpss_stat <- kpss_result@teststat
kpss_crit_1pc <- kpss_result@cval[1]
kpss_crit_5pc <- kpss_result@cval[2]
kpss_crit_10pc <- kpss_result@cval[3]
kpss_reject_1pc <- kpss_stat > kpss_crit_1pc
kpss_reject_5pc <- kpss_stat > kpss_crit_5pc
kpss_reject_10pc <- kpss_stat > kpss_crit_10pc
# Determine support levels
adf_support_level <- case_when(
adf_reject_1pc ~ "1%",
adf_reject_5pc ~ "5%",
adf_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
kpss_support_level <- case_when(
!kpss_reject_10pc ~ "Stationary",
kpss_reject_1pc ~ "1%",
kpss_reject_5pc ~ "5%",
kpss_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
# Return results as a dataframe
tibble(
test_statistic_adf = adf_stat,
test_statistic_kpss = kpss_stat,
adf_support_level = adf_support_level,
kpss_support_level = kpss_support_level,
adf_type = adf_type,
kpss_type = kpss_type
)
})
) %>%
select(name, stationarity_test) %>%
unnest(cols = stationarity_test)
# Categorize results
grouped_results <- stationarity_results %>%
mutate(
agreement_status = case_when(
adf_support_level == kpss_support_level & adf_support_level %in% c("1%", "5%", "10%") ~
paste0("Both tests support stationarity at the ", adf_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level %in% c("1%", "5%", "10%") & adf_support_level != kpss_support_level ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS at the ", kpss_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level == "Stationary" ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS test supports stationarity"),
adf_support_level == "Non-stationary" & kpss_support_level == "Non-stationary" ~
"Both tests indicate non-stationarity",
TRUE ~ "ADF and KPSS disagree"
)
)
# Check if all variables have identical support levels
unique_support_levels <- unique(grouped_results$agreement_status)
if (length(unique_support_levels) == 1 && grepl("Both tests support stationarity", unique_support_levels)) {
print(unique_support_levels)
} else {
# Generate detailed messages
summary_message <- grouped_results %>%
group_by(agreement_status) %>%
summarise(variables = paste(name, collapse = ", "), .groups = "drop")
# Print each case on a separate line
walk2(summary_message$agreement_status, summary_message$variables, function(status, vars) {
print(paste0(status, " for: ", vars))
})
}
return(grouped_results)
}
# Example usage with default test type (drift)
stationarity_results <- stationarity_tests(model_1_data)
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
stationarity_tests <- function(data, adf_types = NULL, kpss_types = NULL) {
# Create a nested dataframe of each unique time series
data_nested <- data %>%
group_by(name) %>%
nest()
# Apply ADF and KPSS tests to each time series
stationarity_results <- data_nested %>%
mutate(
stationarity_test = map2(name, data, ~ {
ts_data <- .y$value
# Determine ADF test type (default: "drift")
adf_type <- if (!is.null(adf_types) && .x %in% names(adf_types)) {
adf_types[[.x]]
} else {
"drift"
}
# Perform ADF test with BIC-based lag selection
adf_result <- ur.df(ts_data, type = adf_type, selectlags = "BIC")
adf_stat <- adf_result@teststat[1]
adf_crit_1pc <- adf_result@cval[1, 1]
adf_crit_5pc <- adf_result@cval[1, 2]
adf_crit_10pc <- adf_result@cval[1, 3]
adf_reject_1pc <- adf_stat < adf_crit_1pc
adf_reject_5pc <- adf_stat < adf_crit_5pc
adf_reject_10pc <- adf_stat < adf_crit_10pc
# Determine KPSS test type (default: "mu")
kpss_type <- if (!is.null(kpss_types) && .x %in% names(kpss_types)) {
kpss_types[[.x]]
} else {
"mu"
}
# Perform KPSS test
kpss_result <- ur.kpss(ts_data, type = kpss_type)
kpss_stat <- kpss_result@teststat
kpss_crit_1pc <- kpss_result@cval[1]
kpss_crit_5pc <- kpss_result@cval[2]
kpss_crit_10pc <- kpss_result@cval[3]
kpss_reject_1pc <- kpss_stat > kpss_crit_1pc
kpss_reject_5pc <- kpss_stat > kpss_crit_5pc
kpss_reject_10pc <- kpss_stat > kpss_crit_10pc
# Determine support levels
adf_support_level <- case_when(
adf_reject_1pc ~ "1%",
adf_reject_5pc ~ "5%",
adf_reject_10pc ~ "10%",
TRUE ~ "Non-stationary"
)
kpss_support_level <- case_when(
!kpss_reject_10pc ~ "10%",
!kpss_reject_5pc ~ "5%",
!kpss_reject_1pc ~ "1%",
TRUE ~ "Non-stationary"
)
# Return results as a dataframe
tibble(
test_statistic_adf = adf_stat,
test_statistic_kpss = kpss_stat,
adf_support_level = adf_support_level,
kpss_support_level = kpss_support_level,
adf_type = adf_type,
kpss_type = kpss_type
)
})
) %>%
select(name, stationarity_test) %>%
unnest(cols = stationarity_test)
# Categorize results
grouped_results <- stationarity_results %>%
mutate(
agreement_status = case_when(
adf_support_level == kpss_support_level & adf_support_level %in% c("1%", "5%", "10%") ~
paste0("Both tests support stationarity at the ", adf_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level %in% c("1%", "5%", "10%") & adf_support_level != kpss_support_level ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, KPSS at the ", kpss_support_level, " level"),
adf_support_level %in% c("1%", "5%", "10%") & kpss_support_level == "Non-stationary" ~
paste0("ADF supports stationarity at the ", adf_support_level, " level, but KPSS does not support stationarity"),
adf_support_level == "Non-stationary" & kpss_support_level %in% c("1%", "5%", "10%") ~
paste0("KPSS supports stationarity at the ", kpss_support_level, " level, but ADF does not support stationarity"),
adf_support_level == "Non-stationary" & kpss_support_level == "Non-stationary" ~
"Both tests indicate non-stationarity",
TRUE ~ "ADF and KPSS disagree"
)
)
# Check if all variables have identical support levels
unique_support_levels <- unique(grouped_results$agreement_status)
if (length(unique_support_levels) == 1 && grepl("Both tests support stationarity", unique_support_levels)) {
print(unique_support_levels)
} else {
# Generate detailed messages
summary_message <- grouped_results %>%
group_by(agreement_status) %>%
summarise(variables = paste(name, collapse = ", "), .groups = "drop")
# Print each case on a separate line
walk2(summary_message$agreement_status, summary_message$variables, function(status, vars) {
print(paste0(status, " for: ", vars))
})
}
return(grouped_results)
}
# Example usage with default test type (drift)
stationarity_results <- stationarity_tests(model_1_data)
